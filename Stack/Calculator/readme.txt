计算器大概思路：
第一步：
创建一个postfix (vector<string>类型)， 用于存储后缀表达式。
// 也可以使用一个string表示， 不同的部分用空格分开。
创建一个symStack (stack<char>类型)， 用于中缀转后缀表达式时，根据优先级入栈出栈使用
// 也可以创建一个stack<string>类型的，
创建一个figStack (stack<double>类型)， 用于后缀表达式计算使用

第二步：
确定优先级 +、-,         *、/、%,        +、-(表正负),        ^,          !(阶乘),        log、ln、sin、cos、tan
可以定义一些枚举常量来表示，或者直接给出1、2、3、4、5、6......
(写一个返回优先级的函数)

第三步：
粗略验证输入，输入的字符必须合法，且输入的运算符有多个字符时检查其连续字符是否与期望的运算符一致.
格式化输入， 便于后续转中缀操作。
（1）移除空格
（2）将多个字符的运算符简记为单个字符（PI 同样的处理操作）
（3）区分加减号与正负号
第一个位置以及左括号后的正负号前加0，可转换为加减运算
除！、）、数字后的加减号不为正负号外，其余均为正负号，简记为其他字符以区分
（4）小数点前后缺0的加0

第四步：
中缀转后缀（先清空一下，避免之前计算的后缀表达式遗留）
一个字符一个字符读取，若为数字或代表常量PI的字符则push_back，记录保存
若为左括号，直接入栈
若为|且标志为奇数ODD，代表入栈的||为0或双，此时可以直接入栈。  若标志为EVEN，全部出栈，包括|， 并记录单个| 
若为右括号，站内符号全部出栈，直到遇到左括号为止，并抛弃左括号。
其他情况，根据优先级判定
若高于栈顶元素，直接入栈，反之栈顶元素出栈，重复以上操作。
直到栈顶元素优先级不高于待存取的符号或栈为空，入栈。
若为数字，接收连续数字，记录。

最后，栈内元素全部出栈。

第五步：
后缀表达式计算
依次读取，根据string[0]是数字或者string为常量符号，直接入栈figStack
若为运算符，出栈对应个数的元素计算，并将结果入栈
重复以上操作直到后缀表达式为空
输出figStack栈顶元素，即为最后结果。（最后可清空该栈，以备下次使用）
